version: 2.1

parameters:
  workflow:
    type: enum
    default: auto
    description: The workflow to trigger.
    enum: [auto, manual, all, caldera]

executors:
  docker:
    docker:
      - image: docker:stable

jobs:
  hadolint:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Checking csaf-dvwa docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/dvwa.Dockerfile || true
      - run:
          name: Checking csaf-gitea docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/gitea.Dockerfile || true
      - run:
          name: Checking csaf-infectionmonkey docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/infectionmonkey.Dockerfile || true
      - run:
          name: Checking csaf-phising docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/phising.Dockerfile || true
      - run:
          name: Checking csaf-purpleops docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/purpleops.Dockerfile || true
      - run:
          name: Checking csaf-wackopicko docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/wackopicko.Dockerfile || true
      - run:
          name: Checking csaf-kali docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/kalilinux.Dockerfile || true
      - run:
          name: Checking csaf-caldera docker file code quality
          command: docker run --rm -i ghcr.io/hadolint/hadolint:latest < build/caldera.Dockerfile || true
  build-dvwa:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build dvwa image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-dvwa:$IMAGE_VERSION . -f build/dvwa.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-dvwa:$IMAGE_VERSION
  build-gitea:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build gitea image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-gitea:$IMAGE_VERSION . -f build/gitea.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-gitea:$IMAGE_VERSION
  build-infectionmonkey:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build infection monkey image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-infectionmonkey:$IMAGE_VERSION . -f build/infectionmonkey.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-infectionmonkey:$IMAGE_VERSION
  build-phising:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build phising image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-phising:$IMAGE_VERSION . -f build/phising.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-phising:$IMAGE_VERSION
  build-purpleops:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build purpleops image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-purpleops:$IMAGE_VERSION . -f build/purpleops.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-purpleops:$IMAGE_VERSION
  build-wackopicko:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build wackopicko image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-wackopicko:$IMAGE_VERSION . -f build/wackopicko.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-wackopicko:$IMAGE_VERSION
  build-kali:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build kali image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-kali:$IMAGE_VERSION . -f build/kalilinux.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-kali:$IMAGE_VERSION
  clone-caldera:
    executor: docker
    steps:
      - setup_remote_docker
      - run:
          name: Clone caldera to docker hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker pull ghcr.io/mitre/caldera:master
            docker tag ghcr.io/mitre/caldera:master $DOCKER_REGISTRY/$REGISTRY_USER/csaf-caldera:master
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-caldera:master
  build-caldera:
    executor: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build caldera image
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY
            docker build -t $DOCKER_REGISTRY/$REGISTRY_USER/csaf-caldera:$IMAGE_VERSION . -f build/caldera.Dockerfile
            docker push $DOCKER_REGISTRY/$REGISTRY_USER/csaf-caldera:$IMAGE_VERSION

workflows:
  version: 2
  build-image-auto:
    when: { equal: [ auto, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-dvwa:
          requires:
            - hadolint
      - build-infectionmonkey:
          requires:
            - hadolint
      - build-phising:
          requires:
            - hadolint
      - build-purpleops:
          requires:
            - hadolint
  build-image-manual:
    when: { equal: [ manual, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-gitea:
          requires:
            - hadolint
      - build-wackopicko:
          requires:
            - hadolint
      - build-kali:
          requires:
            - hadolint
      - build-caldera:
          requires:
            - hadolint
  build-image-all:
    when: { equal: [ all, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - build-dvwa:
          requires:
            - hadolint
      - build-gitea:
          requires:
            - hadolint
      - build-infectionmonkey:
          requires:
            - hadolint
      - build-phising:
          requires:
            - hadolint
      - build-purpleops:
          requires:
            - hadolint
      - build-wackopicko:
          requires:
            - hadolint
      - build-kali:
          requires:
            - hadolint
      - build-caldera:
          requires:
            - hadolint
  clone-caldera:
    when: { equal: [ caldera, << pipeline.parameters.workflow >> ] }
    jobs:
      - hadolint
      - clone-caldera
      - build-caldera:
          requires:
            - hadolint